name: 测试和代码质量检查

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 运行测试
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort
    
    - name: 代码格式检查
      run: |
        # 检查代码格式
        black --check --diff scripts/ tests/
        
        # 检查 import 排序
        isort --check-only --diff scripts/ tests/
        
        # 检查代码风格
        flake8 scripts/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: 运行单元测试
      run: |
        pytest tests/ -v --cov=scripts --cov-report=xml --cov-report=term-missing
    
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 验证示例请求文件
      run: |
        echo "验证示例请求文件..."
        for file in requests/example-*.json; do
          echo "验证 $file"
          python scripts/validate_request.py "$file"
        done
    
    - name: 检查配置文件
      run: |
        echo "检查配置文件语法..."
        python -c "
        import yaml
        import json
        
        # 检查 domains.yml
        with open('config/domains.yml', 'r', encoding='utf-8') as f:
            yaml.safe_load(f)
        print('✅ domains.yml 格式正确')
        
        # 检查 schema.json
        with open('config/schema.json', 'r', encoding='utf-8') as f:
            json.load(f)
        print('✅ schema.json 格式正确')
        "
    
    - name: 模拟 DNS 健康检查
      run: |
        echo "运行 DNS 健康检查（模拟模式）..."
        # 在没有真实 API token 的情况下测试脚本语法
        python -c "
        import sys
        sys.path.append('scripts')
        from health_check import DNSHealthChecker
        print('✅ 健康检查脚本语法正确')
        "

  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 运行安全扫描
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
    
    - name: 检查敏感信息
      run: |
        echo "检查是否包含敏感信息..."
        
        # 检查是否包含 API keys 或密码
        if grep -r -i -E "(api[_-]?key|password|secret|token)" --include="*.py" --include="*.yml" --include="*.json" --exclude-dir=".git" .; then
          echo "⚠️ 发现可能的敏感信息，请检查："
          grep -r -i -E "(api[_-]?key|password|secret|token)" --include="*.py" --include="*.yml" --include="*.json" --exclude-dir=".git" . || true
        else
          echo "✅ 未发现明显的敏感信息"
        fi
        
        # 检查硬编码的 IP 地址（排除示例）
        if grep -r -E "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" --include="*.py" scripts/ | grep -v "192.168\|127.0\|203.0.113\|example"; then
          echo "⚠️ 发现可能的硬编码 IP 地址"
        else
          echo "✅ 未发现硬编码的真实 IP 地址"
        fi

  docs-check:
    name: 文档检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 检查文档链接
      run: |
        echo "检查文档中的链接..."
        
        # 检查 README 中的链接
        if grep -o '\[.*\](.*\.md)' README.md | grep -v "^#"; then
          echo "检查 README 中的文档链接："
          for link in $(grep -o '(.*\.md)' README.md | tr -d '()'); do
            if [ -f "$link" ]; then
              echo "✅ $link 存在"
            else
              echo "❌ $link 不存在"
              exit 1
            fi
          done
        fi
        
        # 检查示例文件是否存在
        echo "检查示例文件："
        for example in requests/example-*.json; do
          if [ -f "$example" ]; then
            echo "✅ $example 存在"
          else
            echo "❌ $example 不存在"
            exit 1
          fi
        done
    
    - name: 检查中文编码
      run: |
        echo "检查中文文档编码..."
        
        # 检查是否有编码问题
        for file in docs/*.md README.md; do
          if file "$file" | grep -q "UTF-8"; then
            echo "✅ $file 编码正确"
          else
            echo "⚠️ $file 编码可能有问题"
          fi
        done
