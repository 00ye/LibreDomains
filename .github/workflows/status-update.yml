name: 状态页面自动更新

on:
  schedule:
    # 每小时更新一次状态页面
    - cron: '0 * * * *'
  workflow_dispatch:  # 允许手动触发
  push:
    branches: [main]
    paths:
      - 'domains/**/*.json'
      - 'config/**'

jobs:
  update-status:
    name: 更新状态页面
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 生成状态页面
      run: |
        python scripts/status_generator.py --output STATUS.md
        python scripts/status_generator.py --metrics --metrics-file status/metrics.json
    
    - name: 生成统计报告
      run: |
        mkdir -p reports
        python scripts/generate_stats.py --output reports/stats_$(date +%Y%m%d_%H%M).json --json
        python scripts/generate_stats.py --output reports/latest_stats.json --json
    
    - name: 创建状态目录
      run: |
        mkdir -p status
        
        # 生成状态徽章数据
        python -c "
        import json
        import sys
        sys.path.append('scripts')
        from generate_stats import StatisticsGenerator
        
        stats = StatisticsGenerator().generate_statistics()
        
        badges = {
          'total_domains': stats['summary']['total_domains'],
          'total_subdomains': stats['summary']['total_subdomains'],
          'total_users': stats['summary']['total_users'],
          'last_updated': '$(date -u +%Y-%m-%dT%H:%M:%SZ)'
        }
        
        with open('status/badges.json', 'w') as f:
            json.dump(badges, f, indent=2)
        "
    
    - name: 检查是否有变更
      id: changes
      run: |
        if git diff --quiet STATUS.md status/ reports/; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: 提交更新
      if: steps.changes.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add STATUS.md status/ reports/
        git commit -m "🤖 自动更新状态页面和统计信息 [skip ci]" || exit 0
        git push

  health-check:
    name: 健康检查
    runs-on: ubuntu-latest
    needs: update-status
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 运行健康检查
      run: |
        mkdir -p reports/health
        python scripts/health_check.py --report-file reports/health/health_$(date +%Y%m%d_%H%M).md
        python scripts/health_check.py --json --report-file reports/health/health_latest.json
    
    - name: 检查健康状态
      id: health
      run: |
        if python scripts/health_check.py --json | jq -e '.summary.unhealthy_subdomains == 0' > /dev/null; then
          echo "healthy=true" >> $GITHUB_OUTPUT
        else
          echo "healthy=false" >> $GITHUB_OUTPUT
        fi
    
    - name: 创建健康问题 Issue
      if: steps.health.outputs.healthy == 'false'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // 读取健康检查报告
          const healthReport = fs.readFileSync('reports/health/health_latest.json', 'utf8');
          const health = JSON.parse(healthReport);
          
          const unhealthyCount = health.summary.unhealthy_subdomains;
          const title = `🚨 DNS 健康检查发现 ${unhealthyCount} 个异常子域名`;
          
          let body = `## 🔍 健康检查报告\n\n`;
          body += `**检查时间**: ${health.timestamp}\n\n`;
          body += `**异常子域名数量**: ${unhealthyCount}\n\n`;
          body += `### 📋 异常详情\n\n`;
          
          for (const [domain, report] of Object.entries(health.domain_reports)) {
            if (report.unhealthy_subdomains > 0) {
              body += `#### 域名: ${domain}\n\n`;
              
              for (const subdomain of report.subdomain_reports) {
                if (!subdomain.healthy) {
                  body += `- **${subdomain.full_domain}**\n`;
                  body += `  - 记录类型: ${subdomain.record_type}\n`;
                  body += `  - 记录值: ${subdomain.record_value}\n`;
                  body += `  - 问题: ${subdomain.issues.join(', ')}\n\n`;
                }
              }
            }
          }
          
          body += `### 🔧 建议操作\n\n`;
          body += `1. 检查 DNS 记录配置\n`;
          body += `2. 验证目标服务器状态\n`;
          body += `3. 联系相关用户确认问题\n`;
          body += `4. 如有必要，删除无效记录\n\n`;
          body += `---\n*此 Issue 由自动健康检查系统创建*`;
          
          // 检查是否已有相同的 Issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'health-check,automated'
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('DNS 健康检查发现') && 
            issue.title.includes('异常子域名')
          );
          
          if (existingIssue) {
            // 更新现有 Issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `## 🔄 健康检查更新\n\n${body}`
            });
          } else {
            // 创建新 Issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['health-check', 'automated', 'priority: high']
            });
          }
    
    - name: 上传健康报告
      uses: actions/upload-artifact@v3
      with:
        name: health-report
        path: reports/health/
        retention-days: 30

  cleanup:
    name: 清理旧报告
    runs-on: ubuntu-latest
    needs: [update-status, health-check]
    if: always()
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 清理旧报告文件
      run: |
        # 保留最近30天的报告
        find reports/ -name "*.json" -type f -mtime +30 -delete 2>/dev/null || true
        find reports/ -name "*.md" -type f -mtime +30 -delete 2>/dev/null || true
        
        # 确保保留最新的文件
        ls -la reports/ || true
    
    - name: 提交清理结果
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add reports/
          git commit -m "🧹 清理旧报告文件 [skip ci]" || exit 0
          git push
        fi
