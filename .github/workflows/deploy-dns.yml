name: Deploy DNS Records

on:
  push:
    branches: [ main ]
    paths: [ 'requests/**/*.json' ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'bestZwei'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: requests/**/*.json

    - name: Debug Cloudflare API Token
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        echo "üîç Cloudflare API Token Debug:"
        if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
          echo "‚ùå CLOUDFLARE_API_TOKEN is not set in repository secrets"
          echo ""
          echo "üîß To fix this issue:"
          echo "   1. Generate a token at https://dash.cloudflare.com/profile/api-tokens"
          echo "   2. Use 'Custom token' with Zone:Read and DNS:Edit permissions"
          echo "   3. Add it as CLOUDFLARE_API_TOKEN secret in repository settings"
          echo "   4. Go to: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
          exit 1
        else
          echo "‚úÖ CLOUDFLARE_API_TOKEN is set"
          echo "üìã Token length: ${#CLOUDFLARE_API_TOKEN} characters"
          echo "üìã Token preview: ${CLOUDFLARE_API_TOKEN:0:8}***${CLOUDFLARE_API_TOKEN: -4}"
          
          # Basic format validation
          if [[ ! "$CLOUDFLARE_API_TOKEN" =~ ^[A-Za-z0-9_-]{40}$ ]]; then
            echo "‚ö†Ô∏è  Warning: Token format seems incorrect (should be 40 characters)"
          else
            echo "‚úÖ Token format looks correct"
          fi
        fi

    - name: Validate Cloudflare API Token
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        echo "üîê Validating Cloudflare API token..."
        if ! node scripts/validate-cloudflare-token.js; then
          echo ""
          echo "‚ùå Cloudflare API token validation failed"
          echo ""
          echo "üîß Troubleshooting steps:"
          echo "   1. Check if token exists in repository secrets:"
          echo "      Settings ‚Üí Secrets and variables ‚Üí Actions"
          echo "   2. Verify token permissions at:"
          echo "      https://dash.cloudflare.com/profile/api-tokens"
          echo "   3. Required permissions: Zone:Read, DNS:Edit"
          echo "   4. Check if token is expired or revoked"
          echo "   5. Test token manually: curl -H 'Authorization: Bearer YOUR_TOKEN' https://api.cloudflare.com/client/v4/user/tokens/verify"
          echo ""
          echo "üÜò If issue persists:"
          echo "   - Delete and recreate the API token"
          echo "   - Update the repository secret with new token"
          echo "   - Ensure token has access to zone: $(cat config/domains.yml | grep cloudflare_zone_id | head -1 | cut -d'"' -f2)"
          exit 1
        fi
        echo "‚úÖ Cloudflare API token is valid and has required permissions"
    
    - name: Debug environment
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        echo "üîç Environment Debug Info:"
        echo "  Node.js version: $(node --version)"
        echo "  npm version: $(npm --version)"
        echo "  Cloudflare API token: ${CLOUDFLARE_API_TOKEN:0:8}..."
        echo "  Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
        echo ""
        echo "üîß Running troubleshooter..."
        node scripts/troubleshoot.js
    
    - name: Deploy DNS records
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        echo "üöÄ Starting DNS deployment..."
        deployment_errors=""
        exit_code=0
        
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo ""
          echo "üìÅ Processing file: $file"
          echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
          
          if [[ ! -f "$file" ]]; then
            echo "‚ö†Ô∏è  File deleted, skipping deployment"
            continue
          fi
          
          # Extract domain and subdomain for logging
          domain=$(jq -r '.domain' "$file")
          subdomain=$(jq -r '.subdomain' "$file")
          echo "üåê Target: ${subdomain}.${domain}"
          
          if ! node scripts/deploy-dns.js deploy "$file"; then
            echo "‚ùå Deployment failed for $file"
            deployment_errors="$deployment_errors\n- $file (${subdomain}.${domain})"
            exit_code=1
          else
            echo "‚úÖ Deployment successful for $file"
          fi
        done
        
        if [ $exit_code -ne 0 ]; then
          echo ""
          echo "‚ùå Deployment Summary: FAILED"
          echo "Failed deployments:$deployment_errors"
          exit 1
        else
          echo ""
          echo "‚úÖ Deployment Summary: ALL SUCCESSFUL"
        fi
    
    - name: Run health check
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        echo "üè• Running post-deployment health check..."
        node scripts/health-check.js || echo "‚ö†Ô∏è  Some records may need time to propagate"
    
    - name: Commit deployed records
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "üíæ Committing deployed domain records..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add domains/
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è  No new domain files to commit"
        else
          git commit -m "Deploy DNS records [skip ci]"
          git push
          echo "‚úÖ Domain records committed and pushed"
        fi
    
    - name: Comment on triggering commits
      if: always() && steps.changed-files.outputs.any_changed == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const success = '${{ job.status }}' === 'success';
          const files = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ');
          
          let comment = success ? 
            '‚úÖ **DNS Deployment Successful**\n\n' : 
            '‚ùå **DNS Deployment Failed**\n\n';
          
          comment += 'Processed files:\n';
          for (const file of files) {
            if (file.trim()) {
              comment += `- ${file}\n`;
            }
          }
          
          if (!success) {
            comment += '\n**Troubleshooting:**\n';
            comment += '1. Check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n';
            comment += '2. Verify Cloudflare API token permissions\n';
            comment += '3. Run `node scripts/troubleshoot.js` locally\n';
            comment += '4. Check `node scripts/health-check.js` for record status\n';
          }
          
          // Comment on the latest commit
          try {
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comment
            });
          } catch (error) {
            console.log('Failed to create commit comment:', error.message);
          }
